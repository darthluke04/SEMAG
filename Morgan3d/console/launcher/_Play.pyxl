$Play
════════════════════════════════════════════════════════════════════════

const gameArray = [{
   title: "Quadpaddle",
   developer: "CasualEffects",
   url: "quad://games/quadpaddle",
   description: "Blast bricks as a team from all four sides, grabbing powerups and racking up points.",
   version:      1.0,
   cooperative:  true,
   competitive:  false,
   min_players:  1,
   max_players:  4,
   achievements: false,
   builtin:      true,
   highscores:   false,
   label: qplabel[0][0],
   preview: qppreview
},

{
   title: "Doubles de Pon",
   developer: "Steve LaVietes",
   url: "quad://games/doublesdepon",
   description: "Action puzzle game for one to four players.",
   version:      1.0,
   cooperative:  true,
   competitive:  true,
   min_players:  1,
   max_players:  4,
   achievements: false,
   builtin:      true,
   highscores:   true,
   label: dplabel[0][0],
   preview: dppreview
},

{
   title:        "Duality",
   developer:    "CasualEffects",
   url:          "quad://games/duality",
   description:  "Pong where each player is the negative space of the other.",
   version:      1.0,
   cooperative:  false,
   competitive:  true,
   min_players:  1,
   max_players:  2,
   achievements: false,
   builtin:      true,
   highscores:   false,
   label:        dllabel[0][0],
   preview:      dlpreview
},

{
   title: "Serpitron",
   developer: "CasualEffects",
   url: "quad://games/serpitron",
   description: "Grow your serpent without crashing into obstacles or yourself. With rats, shotguns, blizzards, cities, & pyramids.",
   version:      1.5,
   cooperative:  false,
   competitive:  true,
   min_players:  1,
   max_players:  4,
   achievements: false,
   builtin:      true,
   highscores:   false,
   label: splabel[0][0],
   preview: sppreview
},

{
   title: "Ice Time",
   developer: "CasualEffects",
   url: "quad://games/icetime",
   description: "2 vs. 2 ice hockey with teams, player stats., faceoffs, passing…and a Zamboni.",
   version:      1.0,
   cooperative:  true,
   competitive:  true,
   min_players:  1,
   max_players:  4,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label: itlabel[0][0],
   preview: itpreview
},

{
   title: "HexFlipper",
   developer: "Cort Stratton",
   url: "quad://games/hexflipper",
   description: "A trippy turn-based territory-claiming game for 1-4 players",
   version:      1.0,
   cooperative:  false,
   competitive:  true,
   min_players:  1,
   max_players:  4,
   achievements: false,
   builtin:      true,
   highscores:   false,
   label:        hflabel[0][0],
   preview:      hfpreview
},

                   
{
   title: "Beat The Gobblins",
   developer: "Stephan Steinbach",
   url: "quad://games/beat_the_gobblins",
   version:      1.1,
   description:  "An evil wizzard has trapped you on top of their tower and summoned hordes of angry bombgobblins. Good luck!",
   min_players:   1,
   max_players:   1,
   cooperative:  false,
   competitive:  false,
   achievements: false,
   highscores:   true,
   builtin:      true,
   label: bglabel[0][0],
   preview: bgpreview
},

{
   title: "Rescue Roguelike",
   developer: "Steinbach, Luong, and Patrick",
   url: "quad://games/rescue_roguelike",
   description: "Turn-based tactical adventure.",
   version:      0.9,
   cooperative:  false,
   competitive:  false,
   min_players:  1,
   max_players:  1,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label: rrlabel[0][0],
   preview: rrpreview
},

{
   title: "R. P. S.",
   developer: "Casual Effects",
   url: "quad://games/rps",
   version:      1.0,
   description:  "Rock-paper-scissors battle royale.",
   min_players:   1,
   max_players:   4,
   cooperative:  false,
   competitive:  true,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label:        rplabel[0][0],
   preview:      rppreview
},

{
   title: "Beyond Control",
   developer: "Casual Effects",
   url: "quad://games/beyond_control",
   version:      1.0,
   description:  "Program your broken robots to race through the ruins.",
   min_players:   1,
   max_players:   4,
   cooperative:  false,
   competitive:  true,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label:        bclabel[0][0],
   preview:      bcpreview
},

{
   title: "Friendly Fishing",
   developer: "Casual Effects",
   url: "quad://games/friendly_fishing",
   version:      1.0,
   description:  "Join your friends for a relaxing afternoon of fishing and you just might top the lake records.",
   min_players:   1,
   max_players:   4,
   cooperative:  true,
   competitive:  false,
   achievements: false,
   highscores:   true,
   builtin:      true,
   label:        fflabel[0][0],
   preview:      ffpreview
},
                   
{
   title: "Across the Lake",
   developer: "The Steinbachers",
   url: "quad://games/across_the_lake",
   version:      1.0,
   description:  "You are a stone, skipping across the lake in this endless skipper.",
   min_players:   1,
   max_players:   1,
   cooperative:  false,
   competitive:  false,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label:        allabel[0][0],
   preview:      alpreview
}]


const promptFont = mediumFont
const selectedColor = #f

const TAB_WIDTH = 90


const tab_array = [
    {title: "Games"},
    {title: "Online"},
    {title: "System"}
]

let tab_index

// Pixel scrolling
let gameShift = 0
let gameIndex = 0
let modeFrameShift = 0


def draw_icon(icon, pos):
   assert(icon != nil)
   draw_sprite({sprite: icon, pos: pos + xy(3 + icon.size.x / 2, 3 - icon.size.y / 2)})
   return xy(icon.size.x + 2, icon.size.y + 2)


/* Called from manage_tabs. In order to transition state fluidly
   through them, the tabs push new modes on top of the others 
   going from left to right. */
def set_tab_index(t):
    const old = tab_index
    tab_index = t
    if tab_index == 0:
        if old == 1:
            pop_mode()
    else if tab_index == 1:
        if old == 0:
            // Switch to the quadplay-OS level tab, giving it
            // the manage_tabs callback as a helper for drawing
            // the top tab bar
            push_mode($OnlineMenu, manage_tabs)
        else:
            // Pop back from the system menu into the online mode
            pop_mode()
        
    else if tab_index == 2:
        // Switch to the quadplay-OS level tab, giving it
        // the manage_tabs callback as a helper for drawing
        // the top tab bar
        push_mode($ControlsMenu, manage_tabs)

        
/* Draw the tab labels on top and handle horizontal input. This is common code
   across all tabs */
def manage_tabs():
    for pad in gamepad_array:
        if (pad.ee or pad.xx < 0) and tab_index > 0: set_tab_index(tab_index - 1)
        if (pad.ff or pad.xx > 0) and tab_index < size(tab_array) - 1: set_tab_index(tab_index + 1)
        
    draw_corner_rect(xy(0, 0), xy(384, 16), #2)
    draw_line(xy(0, 16), xy(384, 16), #f)

    for tab at t in tab_array:
        const active = t == tab_index
        const pos = xy(TAB_WIDTH * t + (SCREEN_SIZE.x - TAB_WIDTH * (size(tab_array) - 1)) / 2, if active then 8 else 9)
        const z = 0

        // Tab background
        const tab_size = xy(TAB_WIDTH + 1, if active then 17 else 16)
        draw_rect(pos, tab_size, if active then $system_window_background else $system_prompt_shadow, #F, nil, z)

        // Tab label
        draw_text({
            font: mediumFont,
            text: tab.title,
            pos: pos,
            color: (if active then selectedColor else $system_unselected_color),
            shadow: $system_prompt_shadow,
            x_align: "center",
            y_align: "center",
            z: z
        })
        
        // Make active on mouse hover
        if overlaps(touch, {pos: pos, size: tab_size}) and tab_index != t:
            // TODO: Cannot directly change the tab index because
            // of push/pop mode; they are designed to only change sequentially
            //set_tab_index(t)
    
        if t == tab_index + 1:
            draw_text({font: mediumFont, text: joy.prompt["[>]"], pos: pos + xy(8 - TAB_WIDTH / 2, 0), color: $system_prompt_color, shadow: $system_prompt_shadow, x_align: "center", y_align: "center", z: z})
        else if t == tab_index - 1:
            draw_text({font: mediumFont, text: joy.prompt["[<]"], pos: pos - xy(8 - TAB_WIDTH / 2, 0), color: $system_prompt_color, shadow: $system_prompt_shadow, x_align: "center", y_align: "center", z: z})

        // Erase the bottom of the tab
        if active:
            draw_line(pos + xy(1 - TAB_WIDTH / 2, 8), pos + xy(+TAB_WIDTH / 2 - 1, 8), $system_window_background, z)



def manage_games_tab():
    // Blinking active choice
    const bright             = (1 + cos(mode_frames / 9)) / 2
    const active_color       = lerp($system_prompt_color, #fff, 50% bright)
    const active_outline     = rgba(1,1,1, 25% bright)
    const active_shadow      = 50% $system_prompt_shadow

    draw_text({font: mediumFont, text:joy.prompt["⍐"], pos: xy(1, 28), color: $system_prompt_color, shadow: $system_prompt_shadow})
    draw_text({font: mediumFont, text:joy.prompt["⍗"], pos: xy(1, 220), color: $system_prompt_color, shadow: $system_prompt_shadow})

    const boxVerticalSpacing = 75

    preserving_transform:
        set_clip(xy(12, 20), xy(64, 201))
        for gameIndex - 2 <= g <= gameIndex + 2:
            const game = array_value(gameArray, g, "loop")
            const pos = xy(44, boxVerticalSpacing * g + 64/2 + 19 - gameShift - (gameIndex - 1) * boxVerticalSpacing)
            draw_sprite({sprite: game.label, pos: pos})
            draw_line(pos + xy(1-64/2, 64/2), pos + xy(64/2-2, 64/2), $system_prompt_shadow)

    // Highlight selected game
    draw_corner_rect(xy(11, 93), xy(66, 66), nil, #f)
    draw_corner_rect(xy(10, 92), xy(68, 68), nil, #d)
   
    const game = gameArray[gameIndex]
    const t = floor((mode_frames - modeFrameShift) / 3) mod 60
    const x = 99
    const pos = xy(x + 384/4, 224/4 + 66)
    draw_sprite({sprite: game.preview[t mod 6][floor(t / 6)], pos: pos})
    draw_line(pos + xy(1-384/4, 224/4), pos + xy(384/4-2, 224/4), $system_prompt_shadow)
    draw_line(pos + xy(2-384/4, 224/4 + 1), pos + xy(384/4-3, 224/4 + 1), $system_prompt_shadow / 2)
    draw_text({font:largeFont, text:game.title, pos:xy(x, 40), color:selectedColor, shadow:$system_prompt_shadow, x_align:"left"})
    draw_text({font:mediumFont, text:"by " + game.developer, pos:xy(x, 56), color:selectedColor, shadow:$system_prompt_shadow, x_align:"left"})
    draw_text({font:smallFont, text:game.url, pos:xy(x, 220), color:$system_unselected_color, x_align:"left"})
    draw_text({font:smallFont, text:game.description, pos:xy(x, 193), color:selectedColor, x_align:"left", wrap_width: 280})

    const sideX = 295
    const wordX = sideX + 27
    draw_text({font:promptFont, text:joy.prompt["(a)"] + "  PLAY", pos:xy(sideX + 7, 74),
               color:active_color, shadow: active_shadow, outline: active_outline, x_align:"left"})
    if not game.builtin: draw_text({font:promptFont, text:joy.prompt["ⓓ"] + "  FORGET", pos:xy(sideX + 7, 88), color:$system_prompt_color, shadow:$system_prompt_shadow, x_align:"left"})

    // Icons
    let y = 112
    if game.max_players == 0 or game.min_players == 0 and game.max_players == nil:
        draw_text({font:mediumFont, text:"Animation", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).y
        draw_icon(icons.players[0], xy(sideX, y)).y
        y += 15
    else if game.min_players != nil and game.max_players != nil:
        let lo = clamp(min(game.min_players, game.max_players), 1, 5)
        let hi = clamp(max(game.min_players, game.max_players), 1, 5)
        if lo != hi:
            draw_icon(icons.players[lo], xy(sideX, y))
            draw_line(xy(sideX + 21, y - 4), xy(sideX + 28, y - 4), selectedColor)
            draw_icon(icons.players[hi], xy(sideX + 29, y)).y
        else:
            draw_icon(icons.players[lo], xy(sideX, y))
            draw_text({font:mediumFont, text:"" + lo + "-Player", pos:xy(wordX, y), color:selectedColor, x_align:"left"})
        y += 15
    else if game.min_players != nil or game.max_players != nil:
        // Only one specified
        const lo = if game.min_players != nil then game.min_players else game.max_players
        draw_icon(icons.players[clamp(lo, 1, 5)], xy(sideX, y))
        draw_text({font:mediumFont, text:"" + lo + "-Player", pos:xy(wordX, y), color:selectedColor, x_align:"left"})
        y += 15

    if game.cooperative:
        draw_icon(icons.cooperative, xy(sideX, y)).y
        y += draw_text({font:mediumFont, text:"Cooperate", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).size.y

    if game.competitive:
        draw_icon(icons.competitive, xy(sideX, y)).y
        y += draw_text({font:mediumFont, text:"Compete", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).size.y
      
    if game.achievements:
        draw_icon(icons.achievements, xy(sideX, y)).y
        y += draw_text({font:mediumFont, text:"Achieve", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).size.y

    if game.highscores:
        draw_icon(icons.highscores, xy(sideX, y)).y
        y += draw_text({font:mediumFont, text:"Highscore", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).size.y

    for pad in gamepad_array:
        if pad.aa or pad.qq:
            const game = gameArray[gameIndex]
            if (game.title == "") and $getIsHosting():
                // Resolution restriction for games that are not full or half resolution
                $showPopupMessage(game.title + " cannot run while hosting in this release")
            else:
                def callback():
                    launch_game(game.url)
                
                set_mode($SlideOut, callback) because "Player selected game"

        // Animate scrolling
        if pad.yy:
            const Δy = 3 pad.yy
            play_sound(boop, false, 300%)
            def shift(): gameShift += Δy
            add_frame_hook(shift, nil, boxVerticalSpacing / 3)

    // Change games
    if gameShift >= boxVerticalSpacing:
        gameShift -= boxVerticalSpacing
        modeFrameShift = mode_frames - 1
        ++gameIndex
    else if gameShift <= -boxVerticalSpacing:
        gameShift += boxVerticalSpacing
        --gameIndex
        modeFrameShift = mode_frames - 1

    gameIndex = loop(gameIndex, gameArray.length)
  
            

    
enter
────────────────────────────────────────────────────────────────────────
tab_index = 0



frame
────────────────────────────────────────────────────────────────────────
const intro_frames = 20
if game_frames < intro_frames:
    // Fade and slide in
    const α = 1 - min(1, (game_frames + 1) / (intro_frames + 1))
    
    set_post_effects({
        background: #000,
        pos:        xy(α * SCREEN_SIZE.x, 0),
        color:      rgba(0, 0, 0, α)
    })
   
else if game_frames == intro_frames:
    reset_post_effects()
   
set_background($system_window_background)
manage_tabs()
manage_games_tab()

// The other cases are their own modes
