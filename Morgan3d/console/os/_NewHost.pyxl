$NewHost
════════════════════════════════════════════════════════════════════════
let selected_column_index = 0
let word_array

const REPEAT_DELAY = 35
const REPEAT_FREQUENCY = 6

let window_scale

// mode_frames time at which the Y axis last changed
let last_y_change = 0

def draw_window(tau):
    // Dark scrim
    draw_corner_rect(xy(0, 0), VIEW_ARRAY[0].size, rgba(0, 0, 0, 40% tau))

    const window_pos = VIEW_ARRAY[0].size * xy(0.5, 0.45)
    
    // Drop shadow
    draw_rect(window_pos + xy(0, window_scale * 0.5 * VIEW_ARRAY[0].size.y * tau + 1), xy((window_scale - 1%) VIEW_ARRAY[0].size.x * tau, 2), #012)
    
    // Window
    draw_rect(window_pos, window_scale * VIEW_ARRAY[0].size * tau, $system_window_background, #fff)


    
def draw_controls():
    const font       = if VIEW_ARRAY[0].size.y <= 180 then $font8 else $font9
    const code_font  = if VIEW_ARRAY[0].size.y <= 180 then $font6 else $font9
    const small_font = if VIEW_ARRAY[0].size.y <= 180 then $font5 else $font6
    
    let y = (50% - window_scale / 2) * VIEW_ARRAY[0].size.y + 4
    y += draw_text({text: "Enter Host Code", pos: xy(VIEW_ARRAY[0].size.x / 2, y), font: font, color: #fff, x_align: "center", y_align: "top"}).size.y + 1
    y += draw_text({text: "(The host must share this with you)", pos: xy(VIEW_ARRAY[0].size.x / 2, y), font: small_font, color: #b, x_align: "center", y_align: "top"}).size.y

    const COLUMN_SPACING = if VIEW_ARRAY[0].size.y <= 180 then 28 else 40
    const BOX_HEIGHT = if VIEW_ARRAY[0].size.y <= 180 then 13 else 18
    y = floor(y + 20% VIEW_ARRAY[0].size.y)
    
    for column < 6:
        const x = VIEW_ARRAY[0].size.x / 2 + (column - 2.5) * COLUMN_SPACING
        const selected = (column == selected_column_index)
        const word_index = word_array[column]
        
        const width = $draw_system_menu_text({
            font: code_font,
            text: capitalize($NET_ID_WORD_TABLE[column][word_index]),
            pos: xy(x, y),
            x_align: "center",
            y_align: "center"
        }, selected).size.x

        if selected:
            draw_rect(xy(x, y), xy(COLUMN_SPACING, BOX_HEIGHT), nil, #fff)

            if word_index > 0:
                $draw_system_menu_text({font: code_font, text: "▲", pos: xy(x, y - (BOX_HEIGHT - 2)), x_align: "center", y_align: "center"}, true)
            if word_index < size($NET_ID_WORD_TABLE[0]) - 1:
                $draw_system_menu_text({font: code_font, text: "▼", pos: xy(x, y + (BOX_HEIGHT)), x_align: "center", y_align: "center"}, true)
            
        else if (column bitand 1) and (column != 5):
            $draw_system_menu_text({
                font: code_font,
                text: ",",
                pos: xy(x + width / 2 + 1, y),
                x_align: "left",
                y_align: "center"
            })

    y = floor(70% VIEW_ARRAY[0].size.y)
    
    draw_text({
        font: font,
        text: replace("(q) Cancel", joy.prompt),
        pos: xy((50% - 40% window_scale) * VIEW_ARRAY[0].size.x, y),
        x_align: "left",
        color: $system_prompt_color,
        shadow: $system_prompt_shadow
    })

    draw_text({
        font: font,
        text: replace("(p) Visit Host", joy.prompt),
        pos: xy((50% + 40% window_scale) * VIEW_ARRAY[0].size.x, y),
        x_align: "right",
        color: $system_prompt_color,
        shadow: $system_prompt_shadow
    })


    
def capitalize(s):
    return if size(s) == 0 then "" else uppercase(s[0]) + slice(s, 1)



def set_from_sentence(sentence):
    // Parse the code into words. This works on both the URL encoded version and
    // the straight host code sentence version
    const src = split(replace(lowercase(sentence), {"_": " ", ",": " ", "\n": " ", ".": " "}), " ", " ")
    let array = []
    for word in src:
        word = trim_spaces(word)
        if word != "": push(array, word)
        
        // Set the indices
        for column < min(6, size(array)):
            const index = find($NET_ID_WORD_TABLE[column], array[column])
            if index != nil: word_array[column] = index



enter
────────────────────────────────────────────────────────────────────────
last_y_change = mode_frames
selected_column_index = 0
word_array = [16, 16, 16, 16, 16, 16]

// Default to the most recent host
const recent_host_array = parse($localStorage.getItem("recent_host_array") or "[]")
if size(recent_host_array) > 0:
    // Use this machinery for robustness to misparsing
    set_from_sentence($netIDToSentence(recent_host_array[0].code))

$setRuntimeDialogVisible("hostCodePaste", true)


const same_mode = get_mode()
def network_paste_callback(sentence):
    // Make sure that the user hasn't changed to a different
    // mode
    if get_mode() == same_mode:
        $showPopupMessage("Pasted " + sentence)
        set_from_sentence(sentence)
$paste_host_code_callback = network_paste_callback


leave
────────────────────────────────────────────────────────────────────────
$setRuntimeDialogVisible("hostCodePaste", false)
$paste_host_code_callback = nil


frame
────────────────────────────────────────────────────────────────────────
draw_previous_mode()

window_scale = if VIEW_ARRAY[0].size.y <= 180 then 90% else 70%

preserving_transform:
    // Animate zoom
    const intro_frames = 10
    const tau = min(100%, mode_frames / intro_frames)

    for view in VIEW_ARRAY:
        reset_clip()
        // Force the clipping range beyond what the API normally allows
        $clipZ2 = 2049
        set_transform(view.corner, xy(1, 1), 2048.6, 1)
        draw_corner_rect(xy(0, 0), view.size, rgba(14%, 14%, 14%, 80%))

        draw_window(tau)
        if tau == 100%: draw_controls()

        
    if tau == 100%:
        for gamepad in gamepad_array:
            if (gamepad.xx > 0 or gamepad.aa or gamepad.ff) and selected_column_index < 5:
                ++selected_column_index
            else if (gamepad.xx < 0 or gamepad.bb or gamepad.ee) and selected_column_index > 0:
                --selected_column_index

            const is_repeat_frame = (last_y_change < mode_frames - REPEAT_DELAY) and (mode_frames mod REPEAT_FREQUENCY == 0)
            if (gamepad.yy < 0 or (gamepad.y < 0 and is_repeat_frame)) and word_array[selected_column_index] > 0:
                --word_array[selected_column_index]
            if (gamepad.yy > 0 or (gamepad.y > 0 and is_repeat_frame)) and word_array[selected_column_index] < size($NET_ID_WORD_TABLE[0]) - 1:
                ++word_array[selected_column_index]

            if |gamepad.yy|: last_y_change = mode_frames

            // Quit
            if gamepad.qq: pop_mode()

            // Visit
            if gamepad.$pp:
                // Return the host name list to the caller
                let word_list = []
                for index at column in word_array:
                    push(word_list, $NET_ID_WORD_TABLE[column][index])
                    
                pop_mode($wordsToNetID(word_list))
