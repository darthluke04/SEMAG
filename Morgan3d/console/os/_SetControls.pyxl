$SetControls
════════════════════════════════════════════════════════════════════════

// This code handles all screen sizes. Most use the same layout
// with slight alignment tweaks and font changes in order to
// fit well.
//
// The user interface at 64x64 has a different layout,
// which shows only one player's controls and is preceeded
// by a menu for selecting which player is active.

const window_background_color = #135
const window_border_color     = #fff
const text_color              = #fff
const text_shadow_color       = #0006
const prompt_color            = #4DF
const selected_color          = #f
const unselected_color        = #b

const controllerTypeArray = ["Quadplay", "Xbox", "Xbox360", "Keyboard", "Kbd_Alt", "Kbd_P1", "Kbd_P2", "PS5", "PS4", "PS3", "SNES", "SwitchPro", "JoyCon_R", "JoyCon_L", "Zero", "HOTAS", "X_Arcade", "Arcade", "Arcade_X", "Arcade_PS", "Stadia", "GPD_Win", "SN30_Pro", "PiBoy_DMG", "Genesis"];

const playerName = []
for p < 4: push(playerName, "P" + (p + 1) + ": ")


// The player to show controls for. Only used at 64x64
let activeIndex = nil


let old_transform
let old_clip
let old_post_effects
let old_background



enter(p)
────────────────────────────────────────────────────────────────────────
activeIndex = p

old_background = get_background()
old_transform = get_transform()
old_clip = get_clip()
old_post_effects = get_post_effects()
reset_post_effects()
reset_transform()
set_background(window_background_color)


leave
────────────────────────────────────────────────────────────────────────
set_transform(old_transform)
set_clip(old_clip)
set_post_effects(old_post_effects)
set_background(old_background)


frame
────────────────────────────────────────────────────────────────────────

const VIEW_SIZE = VIEW_ARRAY[0].size

// Tweak layout for square aspect ratios
let shiftX = 0 // Symmetric text shift from center
let shiftY = -8 // Vertical offset
let offsetX = 0 // Asymmetric text shift to left to accomodate large button prompt
let shiftSpriteY = 0
let arrowX = 76 // Position of the scroll arrows
let arrowY = -3
let titleY = -7

if VIEW_SIZE.x == 64:
   shiftX = 16
   offsetX = 14
   arrowX = 54
   shiftY = 11
   arrowY = -shiftY
   titleY = arrowY
   shiftSpriteY = -10
else if VIEW_SIZE.x == 128:
   shiftY = 0
   shiftX = 22
   offsetX = 12
   shiftSpriteY = -36
   arrowY = -12
   arrowX = 56
   shiftSpriteY = 0
   titleY = -16
else if VIEW_SIZE.x == 192:
   arrowY = -8
   shiftX = -10
   offsetX = 8
   shiftY = -6
   titleY = -8
   shiftSpriteY = -24
else if VIEW_SIZE.x == 320:
   arrowY = -12
   shiftX = -10
   offsetX = 8
   shiftY = -2
   titleY = -10
   shiftSpriteY = -24
else: // 384
   arrowX = 62
   arrowY = -7
   shiftX = -18
   shiftSpriteY = -24


let font = $font9
if VIEW_SIZE.y <= 64: font = $font5
else if VIEW_SIZE.y <= 180: font = $font8

let controlsFont = font
if VIEW_SIZE.y <= 64: font = $font5
else if VIEW_SIZE.y <= 180: controlsFont = $font6

let choiceFont = $font9
if VIEW_SIZE.y <= 64: choiceFont = font
else if VIEW_SIZE.x == 128: choiceFont = $font5
else if VIEW_SIZE.y == 112: choiceFont = $font6
else if VIEW_SIZE.y <= 180: choiceFont = $font8

// For layout
let scale = 100%
if VIEW_SIZE.y <= 180:
    if VIEW_SIZE.y <= 128:
        scale = 50%
    else:
        scale = 75%

const controllerSpritesheet = if VIEW_SIZE.y >= 224 then $controllerSpritesheet44 else $controllerSpritesheet22

for view at view_index in VIEW_ARRAY:
    const gamepad = gamepad_array[view_index]
    set_transform(view.corner)

    // "Press P when done"
    if VIEW_SIZE.x == 64:
       const text = "Push " + gamepad.prompt["(p)"] + " when done"
       draw_text({font: controlsFont, text: text, pos: xy(VIEW_SIZE.x / 2, VIEW_SIZE.y - 4), color: #023, x_align: "center", y_align: "center"})
    else:
       const text = "Press " + gamepad.prompt["(p)"] + " when done"
       const W = text_width(controlsFont, text)
       draw_line(xy(0.5 VIEW_SIZE.x - 1, 0), xy(0.5 VIEW_SIZE.x - 1, VIEW_SIZE.y), #023)
       draw_line(xy(0, 0.5 VIEW_SIZE.y), xy(0.5 VIEW_SIZE.x - 55% W, 0.5 VIEW_SIZE.y), #023)
       draw_line(xy(0.5 VIEW_SIZE.x + 55% W, 0.5 VIEW_SIZE.y), xy(VIEW_SIZE.x, 0.5 VIEW_SIZE.y), #023)
       draw_text({font: controlsFont, text: text, pos: 0.5 VIEW_SIZE + xy(0, 0), color: #023, outline: window_background_color, x_align: "center", y_align: "center"})
    
       
    for p < 4:
       const control = gamepad_array[p]
    
       // Allow any controller to quit
       if control.$pp or control.qq:
          pop_mode() because "Pressed P or Q"
    
    
       // In 64x64 mode, skip the non-active players
       if activeIndex ≠ ∅ and p ≠ activeIndex: continue
       
       preserving_transform:
          if control.xx:
             let i = find(controllerTypeArray, control.type)
             let tryAgain = true
             let type
             while tryAgain:
                i = loop(i + control.xx, size(controllerTypeArray))
                type = controllerTypeArray[i]
    
                // Force to continue cycling if an illegal value was chosen for
                // this player
                tryAgain = ((p == 0 and type == "Kbd_P2") or
                            ((find(type, "Kbd_") ≠ ∅ or find(type, "Keyboard") ≠ ∅) and
                             ((p > 1) or
                              (p == 1 and (type ≠ "Kbd_P2")))))
             // Switch the device to the selected controller
             device_control("set_pad_type", p, type)
    
          if VIEW_SIZE.x == 64:
             set_transform(xy(32, shiftY) + view.corner, xy(1, 1))
          else:
             set_transform(xy((0.5 + (p bitand 1)) * 0.5 * view.size.x,
                             (p bitshr 1) * 54% view.size.y + (26 + shiftY) * scale) + view.corner, xy(1, 1))
    
          draw_text({font: choiceFont, text: playerName[p] + control.type, shadow: text_shadow_color,
                    pos: xy(0, titleY) * scale, color: text_color, x_align: "center"})
    
          draw_text({font: font, text: "⊲", pos: xy(-arrowX, arrowY) * scale + xy(0, 2), color: text_shadow_color, x_align: "center"})
          draw_text({font: font, text: "⊳", pos: xy(+arrowX, arrowY) * scale + xy(0, 2), color: text_shadow_color, x_align: "center"})
          draw_text({font: font, text: "⊲", pos: xy(-arrowX, arrowY) * scale, color: prompt_color, x_align: "center"})
          draw_text({font: font, text: "⊳", pos: xy(+arrowX, arrowY) * scale, color: prompt_color, x_align: "center"})
    
          draw_sprite({sprite: controllerSpritesheet[control.type], pos: xy(-offsetX / 2, 30 - shiftSpriteY) * scale})
    
          draw_text({font: controlsFont, text: control.prompt["ⓔ"], pos: xy(-44 + shiftX - offsetX, 8) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["ⓠ"], pos: xy(-44 + shiftX - offsetX, 26) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["⍐"], pos: xy(-44 + shiftX - offsetX, 44) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["⍈"], pos: xy(-28 + shiftX - offsetX, 61) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["⍇"], pos: xy(-60 + shiftX - offsetX, 61) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["⍗"], pos: xy(-44 + shiftX - offsetX, 80) * scale, color: #f, shadow: #023, x_align: "center"})
    
          draw_text({font: controlsFont, text: control.prompt["ⓕ"], pos: xy(+44 - shiftX, 8) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["ⓟ"], pos: xy(+44 - shiftX, 26) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["ⓓ"], pos: xy(+44 - shiftX, 44) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["ⓒ"], pos: xy(+28 - shiftX, 61) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["ⓑ"], pos: xy(+60 - shiftX, 61) * scale, color: #f, shadow: #023, x_align: "center"})
          draw_text({font: controlsFont, text: control.prompt["ⓐ"], pos: xy(+44 - shiftX, 80) * scale, color: #f, shadow: #023, x_align: "center"})
