init
───────────────────────────────────────────────────────────
// functions
def make_boid(position):
    return make_entity({
            pos: position,
            angle: 0°,
            scale: 75%,
            sprite: shapes_sprite.hawk,
            override_color: perceptual_lerp_color(BOID_COLOR, #FFF, ξ)})


def update_boid(each_boid):
    // let dir = direction(each_boid.pos - attractors[0])
    each_boid.angle = xy_to_angle(each_boid.vel)

    //// compute acceleration
    
    // initially just apply drag
    let vel_mag = ‖each_boid.vel‖
    let drag_acceleration = -2% vel_mag² * direction(each_boid.vel)

    // acceleration towards goal
    let goal_dir = xy(0, 0)
    let shortest_distance = ‖SCREEN_SIZE‖
    for attractor in attractors:
        const goal_vec = attractor - each_boid.pos
        if magnitude(goal_vec) < shortest_distance:
            if magnitude(goal_vec) > 20:
                goal_dir = direction(goal_vec)
                shortest_distance = ‖goal_vec‖

    // acceleration away from flockmates 
    let avoid_accel = xy(0, 0)
    let overlap_obj = {pos:each_boid.pos, shape:"disk", size: xy(IDEAL_DISTANCE, IDEAL_DISTANCE)}
    let num_influence = 1
    for other_boid in boids:

        if other_boid == each_boid:
            continue

        let offset = each_boid.pos - other_boid.pos
        let mag = ‖offset‖
        if mag > 0.01 and mag ≤ 2 IDEAL_DISTANCE:
            const amount = 2 sign(20 - mag)
            avoid_accel += offset * (amount / mag)
            ++num_influence
            
    avoid_accel /= num_influence
    
    // apply acceleration
    let acceleration = avoid_accel
    let accumulated_accel = ‖acceleration‖
    let accel_left = clamp(1 - accumulated_accel, 0, 1)

    acceleration += accel_left * goal_dir
    acceleration += drag_acceleration

    each_boid.force = acceleration / NUM_ITERATIONS

    // apply acceleration to velocity
    entity_simulate(each_boid)



// Entities
const boids = []
for i < NUM_BOIDS:
    push(boids, make_boid(random_within_square() * ½ SCREEN_SIZE))


// Attractors
const attractors = [
    xy( 60,  60),
    xy(-60, -60)
]


frame
───────────────────────────────────────────────────────────
set_background(BACKGROUND_COLOR)

// Center the camera
set_transform(½ SCREEN_SIZE)

for it < NUM_ITERATIONS:
    iterate(boids, update_boid)
    
iterate(boids, draw_entity)

for attractor in attractors:
    draw_disk(attractor, 5, ATTRACTOR_COLOR)
