Play
════════════════════════════════════════════════════════════════════════

init
════════════════════════════════════════════════════════════════════════

let pos = xy(SCREEN_SIZE.x/2, 132)
let flip = xy(1, 1)
let bounce_amount = 1
let last_watch_frame = nil
let text_color = rgb(1, 1, 1)

// create the bouncer!
//---------------------------------------------------
let x_bouncer = make_bouncer_from_profile("_BUILTIN", 1)
//---------------------------------------------------


frame
────────────────────────────────────────────────────────────────────────
// update the value!
//---------------------------------------------------
let x_size = update_bouncer(x_bouncer)
//---------------------------------------------------

let text_offset = xy(0, (x_size-1) * 8)

// instructions
draw_text(
    font,
    replace("press (a) to bounce", gamepad_array[0].prompt),
    SCREEN_SIZE / 2 - xy(0, SCREEN_SIZE.y / 4) + text_offset,
    text_color,
    rgb(1, 0, 0),
    nil,
    "center",
    "center"
)

text_color = lerp(text_color, rgb(1, 1, 1), 0.04)

let sprite = astronaut.idle[0]
if joy.x:
    flip.x = joy.x
    sprite = astronaut.run[⌊mode_frames / 10⌋ mod 2]
    pos.x = loop(pos.x + joy.x, SCREEN_SIZE.x)


if joy.aa:
    // Apply a displacement!
    //---------------------------------------------------
    displace_bouncer(x_bouncer, 2)
    //---------------------------------------------------
    last_watch_frame = mode_frames
    text_color = rgb(0, 1, 0)


let y_size = 1 / x_size
let this_pos = xy(pos.x, pos.y + 4 * sprite.size.y / 2 * (1 - y_size))

// Sky
set_background(#000)
for i < 100: 
    let pos = xy(hash(i), hash(i + 1000))
    draw_point(
        pos * SCREEN_SIZE * xy(1, 0.6) + text_offset/4,
        #ccc
    )

draw_text(
    font,
    "SPROING EXAMPLE",
    xy(SCREEN_SIZE.x/2, 10) + text_offset,
    text_color,
    rgb(1,0,0),
    nil,
    "center",
    "center"
)

// Ground
draw_corner_rect(
    xy(0, 140) + text_offset/4,
    xy(SCREEN_SIZE.x, SCREEN_SIZE.y - 139),
    #444
)

// Shadow
draw_line(pos + xy(-4, 8), pos + xy(+4, 8), rgba(0, 0, 0, 20%))

// Alien
draw_sprite(sprite, this_pos, 0, 4 * flip * xy(x_size, y_size))
