Play
════════════════════════════════════════════════════════════════════════
const view = make_view(dungeon_map)

const billboard_array = []

/* Capture the view variable */
def perspective_zoom(cs_z):
    return DIV(SUB(0, view.perspective_constant), cs_z)


enter
────────────────────────────────────────────────────────────────────────

// Scan the map for spawns
const map = dungeon_map
for x < map.size.x:
    for y < map.size.y:
        const sprite = map.layer[3][x][y]
        if sprite:
            const pos = xyz((x + ½) * map.sprite_size.x, (y + ½) * map.sprite_size.y, 0)
            if sprite.monster_spawn:
                // Bias the z-order so that it appears to be 
                // closer to the camera and doesn't get stuck inside
                // floor and walls at angles
                push(billboard_array, {
                    sprite: allagon_sprite[0][0], 
                    pos: pos,
                    cs_z_bias: +80})
            else if sprite == map.spritesheet.potion_item:
                push(billboard_array, {
                    sprite: potion_sprite[0][0], 
                    pos: pos,
                    cs_z_bias: +30})


frame
────────────────────────────────────────────────────────────────────────

// Update view from constants to allow for interactive tuning
view.far = 64 VIEW_TILE_DISTANCE
simulate_view(view, gamepad_array[0], gamepad_array[1])

preserving_transform:        
    set_transform(½ SCREEN_SIZE + xy(0, -2 view.pitch / 1°))
    set_clip(xy(0, LETTERBOX_HEIGHT), xy(SCREEN_SIZE.x, SCREEN_SIZE.y - 2 LETTERBOX_HEIGHT), -view.far, view.far - view.near)    
    set_camera({zoom: perspective_zoom})
    
    draw_floor_and_ceiling(view, dungeon_map)
    draw_walls(view, dungeon_map)    
    for pos, sprite, cs_z_bias in billboard in billboard_array:
        draw_billboard(view, sprite, pos, cs_z_bias, 50%)

if VIEW_ARRAY[0].size.x ≥ 192:
    draw_minimap(view, dungeon_map)
    draw_controls(view.control_scheme, gamepad_array[0], gamepad_array[1])

