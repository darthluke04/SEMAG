/*
This framework shows how to ray cast in the style of DOOM 
directly from a TMX map. The core technique requires that walls
are perpendicular to the floor and that shading is based on depth.

The code is designed so that it will adapt to any screen resolution.
The default is set to 192x112 to give good performance on Raspberry Pi.
A normal computer can easily handle full 384x224 resolution.

Assumes the shear based on pitch has already been applied when
any of the functions are called.

It can be adapted in several ways within those limitations:

- Multiple elevations and stairs by clipping the 
  horizontal spans drawn and tracing multiple layers
- Walls that are not axis aligned in XZ 
- Animated doors by explicitly tracing additional "walls" 
  that rotate or translate
- Alpha masks on walls (or floors) by continuing the trace
  when the wall sprite hit has a some non-1 values in its
  alpha channel
- Fog, using a white override_color and "lerp" instead 
  of "multiply"

Many of those need a more sophisticated, non-TMX source map that
can represent thin and angled walls.

The world-space coordinate system is: 
  +x = East, +y = North, +z = Up, with units of map floor pixels.

The camera-space coordinate system is:
  +x = Right, +y = Up, +z = out of the screen, with units of 
  map pixels.

quadplay can operate equally well with xy() and xz()
values to allow a different choice of ground plane. This
system means that for mostly 2D gameplay, the xy()
coordinates used by maps, physics, path finding, and other 
built-in routines naturally maps to the ground plane and
reduces the number of conversions needed.
*/

todo("Separate view and player")

/* Given a transformed sprite (such as sprite.rotated_90), returns
   the rotation angle to apply when spawning an in-world object 
   from it. Ignores flips. */
def sprite_spawn_angle(sprite):
    if sprite == sprite.base.rotated_90:
        return 0°
    else if sprite == sprite.base.rotated_270:
        return 180°
    else if sprite == sprite.base.rotated_180:
        return 90°
    else: // All other cases
        return -90°  
        


def make_view(map):
    const view = {
        // "D-PAD", "DUAL D-PAD", "DUAL ANALOG", "MOUSE"
        control_scheme: "D-PAD",
        
        // Position of feet    
        pos: xyz(½ map.size * map.sprite_size, 60% map.sprite_size.y),
                
        // Yaw 90° = looking north along the +y axis, increases
        // to the left
        yaw: 90°,
        
        // Pitch 0° = horizontal, increases tilt up. In this program it is approximated
        // by shearing instead of tilting the rays
        pitch: 0°,
        
        // For movement collision
        radius: 16,
        
        speed: xy(0,  0),
        spin:  xy(0°, 0°),
        
        jump_vel: 0,
        
        // Along the view axis
        near: 4,
        far:  64 * 4,
        
        // Dimensions of the 2D view
        viewport: {
            size: xy(SCREEN_SIZE),
        },
        
        // Holds the walk loop when playing
        walk_audio: ∅,

        // Edge to edge. This number must match the size of 
        // the background image unless it is scaled.
        horizontal_fov: 75°
    }

    // Find the player spawn point
    for x < map.size.x:
        for y < map.size.y:
            const sprite = map.layer[3][x][y]
            if sprite and sprite.player_spawn:
                // Move the player here
                view.pos.x = (x + ½) * map.sprite_size.x
                view.pos.y = (y + ½) * map.sprite_size.y
                view.yaw = sprite_spawn_angle(sprite)

    
    return view


const FLOOR_LAYER   = 0
const WALL_LAYER    = 1
const CEILING_LAYER = 2


/* Forward vector for the camera in world space */
def ws_forward(view):    
    return xyz(cos(view.yaw), sin(view.yaw), 0)


/* Returns the world-space ray through the given pixel. 
   Pixel should be an integer + ½ for a pixel center.
   Assumes that (0, 0) is the center of the screen-space pixel coordinates
   and that screen space Y = up.
   
   Returns the ray, re-using the passed in object */
def ws_eye_ray(view, pixel, ray default {pos: xyz(0, 0, 0), dir: xyz(0, 0, 0), t_min: 0, t_max: 0}):    
    // Compute the point on the image plane in the view space.
    // yaw = 0 is the view facing east along the +x axis
    ray.dir.x = view.perspective_constant
    ray.dir.y = SUB(0, pixel.x)
    ray.dir.z = pixel.y
                      
    // Normalize in place
    XYZ_DIRECTION(ray.dir, ray.dir)
    
    // Transform from view space to world space
    const c = cos(view.yaw)
    const s = sin(view.yaw)
    
    const dir_x = ray.dir.x
    const dir_y = ray.dir.y
    
    // Reuse the existing dir object to reduce memory allocation
    //
    // x' = c * x - s * y
    // y' = s * x + c * y
    ray.dir.x  = MAD(c, dir_x, MUL(SUB(0, s), dir_y))
    ray.dir.y  = MAD(c, dir_y, MUL( s,        dir_x))

    ray.pos.x  = view.pos.x
    ray.pos.y  = view.pos.y
    ray.pos.z  = view.pos.z
    ray.d_cs_z = SUB(0, dir_x)
    const k = DIV(1, dir_x)
    ray.t_min  = MUL(view.near, k)
    ray.t_max  = MUL(view.far,  k)
    
    return ray



/* Returns the intersection point or ∅ if there is not one */
def ray_horizontal_plane_intersection(ray, ws_z):
    const t = DIV(SUB(ws_z, ray.pos.z), ray.dir.z)
    
    // If the above is NaN, these tests will still work correctly
    return if t ≥ ray.t_min and t ≤ ray.t_max then t else ∅



/* Return the distance darkening factor for a 3D camera-space 
   z value */
def get_shade(view, cs_z, shade, mul default 1):
    const k = MUL(mul, clamp(MAD(cs_z, view.z_fog_constant, 135%), 8%, 100%)³)
    shade.r = k; shade.g = k; shade.b = k;



def draw_floor_and_ceiling(view, map) preserving_transform:
    // Camera-space pixels bounding the span
    const ss_lt_edge     = xy(½ - ½ view.viewport.size.x, 0)
    const ss_rt_edge     = xy(½ view.viewport.size.x - ½, 0)
    
    // Preallocate the rays for the left and right edges of the span
    const lt_ray         = ws_eye_ray(view, ss_lt_edge)
    const rt_ray         = ws_eye_ray(view, ss_rt_edge)
    
    const override_color = rgba(1, 1, 1, 0)
    
    const span_size      = xy(view.viewport.size.x, 0)
    reset_camera()
    
    const pitch_shear = view.viewport.size.y - get_transform().pos.y
    for (½ - pitch_shear) ≤ ss_y ≤ pitch_shear + view.viewport.size.y:
        ss_lt_edge.y = ss_y
        ss_rt_edge.y = ss_y
        
        // Primary rays through the centers of the pixels at each edge
        ws_eye_ray(view, ss_lt_edge, lt_ray)
        ws_eye_ray(view, ss_rt_edge, rt_ray)
        
        // The ceiling is one map sprite high
        const WS_Z_PLANE = if ss_y < 0 then 0 else map.sprite_size.y
        
        // Distance along the ray to the ground at the left edge
        const edge_t = ray_horizontal_plane_intersection(lt_ray, WS_Z_PLANE)
        
        // No intersection on this scanline 
        if edge_t == ∅: continue
    
        // Compute the camera space z of this scanline on the ground
        // plane
        const cs_z = MUL(lt_ray.d_cs_z, edge_t)
        if cs_z < -view.far: continue
        
        // Distance darkening
        get_shade(view, cs_z, override_color)
    
        // Intersection points at left and right edges in map coordinates
        const lt_point = xy(lt_ray.pos + lt_ray.dir * edge_t) / map.sprite_size
        const rt_point = xy(rt_ray.pos + rt_ray.dir * edge_t) / map.sprite_size
    
        const MAP_LAYER = if ss_y < 0 then FLOOR_LAYER else CEILING_LAYER
        draw_map_span(ss_lt_edge, span_size, map, lt_point, rt_point, MAP_LAYER, MAP_LAYER + 1, ∅, cs_z, override_color, "multiply", true, if VIEW_ARRAY[0].size.x ≥ 192 then 50% else 100%)


def set_minimap_transform(view, map):
    // Set this to the distance to offset the map to see more of the field of view
    const OFFSET_FROM_CENTER = 2 map.sprite_size.x
    const corner = xy(8, 6)
    const extent = ⌊⅙ xy(SCREEN_SIZE.x, SCREEN_SIZE.x)⌋
    set_transform(corner + ½ extent, xy(1, -1))
    
    set_camera({pos: xy(view.pos + OFFSET_FROM_CENTER * ws_forward(view)), angle: view.yaw - 90°, zoom: 10%})
    set_clip(corner, extent)
    
    

def draw_minimap(view, map) preserving_transform:
    set_minimap_transform(view, map)
    preserving_transform:
        const extent = get_clip().size
        reset_camera()
        reset_clip()
        draw_rect(xy(0, 0), extent + 2, #2, #578, ∅, 101)
    
    // Show player
    draw_disk(xy(view.pos), view.radius, #ff0, #000, 105)
    
    // Show field of view
    const θ = view.yaw
    const Δθ = ½ view.horizontal_fov
    draw_line(xy(view.pos), xy(view.pos) + 512 xy(cos(θ + Δθ), sin(θ + Δθ)), #ff0, 105)
    draw_line(xy(view.pos), xy(view.pos) + 512 xy(cos(θ - Δθ), sin(θ - Δθ)), #ff0, 105)
    
    // Debug eye rays
    if false:
        for -½ view.viewport.size.x < x < ½ view.viewport.size.x:
            let ray = ws_eye_ray(view, xy(x + ½, 0))    
            draw_line(xy(ray.pos), xy(ray.pos + 256 ray.dir), lerp(#00F, #FF0, x / view.viewport.size.x + ½), 106)
    
    draw_map({map: map, min_layer: 0, max_layer: 1, z: 102})
    


/* Sprite callback for draw_walls */
def wall_intersector(sprite, sprite_pixel_coord, ws_normal, ray, map, distance, ws_coord, map_coord):
    return {
        sprite: sprite, 
        ws_distance: distance,
        
        // xy() instead of xyz()
        ws_normal2D: ws_normal,
        
        // There is only an x texture coordinate because we're rendering
        // vertical strips
        x: if ws_normal.x then sprite_pixel_coord.y else sprite_pixel_coord.x
    }



def draw_walls(view, map) preserving_transform:
    // Preallocate all memory outside of the loop
    const clip_pos   = xy(0, get_clip().corner.y)
    const clip_size  = xy(1, get_clip().size.y)
    const shade      = rgb(1, 1, 1)
    
    const pixel      = xy(-½ - ½ view.viewport.size.x, 0)
    const sprite_pos = xy(0, 0)
    
    const ws_ray = {
        pos: xyz(0, 0, 0),
        dir: xyz(0, 0, 0),
        t_min: 0,
        t_max: 0,
        length: 0
    }
    
    // All sprites are the same size, so precalculate
    const half_sprite_size = ½ map.sprite_size.x    
    const offset = get_transform().pos + pixel
    
    for 0 ≤ x < view.viewport.size.x:
        ++pixel.x
        ++offset.x

        // Generate the ray through the pixel center
        ws_eye_ray(view, pixel, ws_ray)
        
        // API change between ray_intersect_map() and ws_eye_ray()
        ws_ray.length = ws_ray.t_max
    
        const hit = ray_intersect_map(ws_ray, map, WALL_LAYER, wall_intersector, ∅)        

        if hit:
            // Draw the sprite strip, using the clipping
            // region to restrict it to one pixel wide. The sprite
            // is always centered at y=0 and we don't bother restricting
            // the clipping region vertically.
            clip_pos.x = x
            
            // The strip will end up at x after the camera is applied,
            // but we use the 3D position to get it there
            sprite_pos.x = SUB(half_sprite_size, hit.x)
            sprite_pos.y = SUB(half_sprite_size, view.pos.z)            
            sprite_pos.z = MUL(ws_ray.d_cs_z, hit.ws_distance)
            
            set_clip(clip_pos, clip_size)
            set_transform(offset)

            // Shade by distance and orientation
            get_shade(view, sprite_pos.z, shade, if hit.ws_normal2D.x then 60% else 110%)
            draw_sprite(hit.sprite, sprite_pos, ∅, ∅, ∅, ∅, shade, "multiply")
         


def draw_billboard(view, sprite, pos_ws3D, cs_z_bias, sprite_scale default 100%):
    // Transform to camera space. Let quadplay perform perspective scaling
    // and z clipping
    const c = cos(view.yaw)
    const s = sin(view.yaw)
    
    const temp = pos_ws3D - view.pos
    const pos_cs = xyz(s * temp.x - c * temp.y, temp.z, -c * temp.x - s * temp.y)

    const shade = rgb(1, 1, 1)
    get_shade(view, pos_cs.z, shade)

    draw_sprite({
        sprite: sprite,
        pos: pos_cs,
        scale: sprite_scale,
        z: min(0, pos_cs.z + cs_z_bias),
        override_blend: "multiply",
        override_color: shade})
    
        
        
/* Moves the entity.pos along entity.vel, sliding it along
   the nonempty sprites in map[layer]. */
def entity_slide_move_map(entity, map, layer, view) preserving_transform:
    const debug_slide_move = false 
    
    // Map cells have integer coordinates at their centers
    const half_cell = ½ map.sprite_size

    // Bounds on everywhere the entity could be in map coordinates.
    // Recall that integers are map cell centers.
    const map_lo = ⌊transform_ws_to_map_space(map, entity.pos - ½ entity.size + min(entity.vel, xy(0, 0)))⌋
    const map_hi = ⌊transform_ws_to_map_space(map, entity.pos + ½ entity.size + max(entity.vel, xy(0, 0)))⌋

    // The mathematically elegant way to solve this problem is to 
    // sweep the disk through collision with all nearby edges in
    // the map. To perform the swept disk, convert each edge into a
    // capsule and collide a ray with it. The capsule itself is in
    // turn two disks with an oriented line segment between them
    // (since the other side of the capsule cannot be hit).
    //
    // However, for the specific case of walls that are only axis
    // aligned and small velocities, we can simply test moving in each
    // axis independently and collide with walls as if they were entities    


    // Debug visualization on the minimap   
    if debug_slide_move:
        set_minimap_transform(view, map)        

    
    // Every tile that we could possibly hit
    const wall_array = []
    for map_lo.x ≤ map_x ≤ map_hi.x:
        for map_lo.y ≤ map_y ≤ map_hi.y:
            if map.layer[layer][map_x][map_y]:
                // Create an entity at the location of this wall
                
                // Integer map coords are at the corners in the map, so place
                // the wall entity centered by offsetting the map coord
                const wall = {
                    shape: "rect",
                    size: map.sprite_size,
                    scale: xy(1, 1),
                    pivot: xy(0, 0),
                    angle: 0°,
                    pos: transform_map_space_to_ws(map, xy(map_x, map_y) + ½)
                }

                // Debug visualization on the minimap   
                if debug_slide_move:
                    draw_sprite(map.layer[layer][map_x][map_y], wall.pos, ∅, ∅, ∅, 300, #F00C)
                    draw_rect(wall.pos, wall.size, ∅, #00F, wall.angle, 301) 
        
                // Ignore this wall if it is already creating
                // a collision and velocity is trying to move away 
                // from it, so that we can escape
                if dot(wall.pos - entity.pos, entity.vel) ≤ 0 or not overlaps(wall, entity):
                    push(wall_array, wall)

    if debug_slide_move:
        draw_disk(entity.pos, ½ entity.size.x, ∅, #000, 310)
    
    if size(wall_array) == 0:
        // Nothing to hit (a common case)
        entity.pos += entity.vel
        return
    
    // If we expected large velocities
    // compared to the size of the map cells, then
    // we would alternate between axes in smaller steps
    // and on failure would binary search for the largest
    // successful step. Given that this game example moves
    // slowly compared to the cell sizes, we just take one large
    // step on each axis.
    todo("Why is this killing velocity on both axes when only one likely hits? It is always the trivially inside case")
    for axis in "xy":                
        const old = entity.pos[axis]
        entity.pos[axis] += entity.vel[axis]
        for wall in wall_array:
            if overlaps(entity, wall):
                // Fail on this axis! Undo.
                entity.pos[axis] = old
                break


