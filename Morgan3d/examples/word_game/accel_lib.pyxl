// ADSR ACCELERATOR LIBRARY
///////////////////////////////////////////////////////////////////////////////
// this library is a simple ADSR based acceleration system based on the book
// "Game Feel" by Steve Swink [1] and data from GMTK [2].
//
// Usage
// -----
//    - call `make_accelerator`  or `make_accelerator_from_profile` (more on
//      profiles later), these functions return an `accelerator`.
//    - you can then call accelerator_update(accelerator, input) to evaluate
//      the accelerator.  it will return the current _velocity_, so if you want
//      to integrate that into position, you'll need to do that outside of this
//      library.
//    - The model is driven off of three values:
//        - max_velocity: the maximum velocity of the thing being accelerated
//        - num_frames_attack: the number of frames it takes under constant
//          acceleration to reach max_velocity
//        - num_frames_release: the number of frames it takes from maximum
//          velocity to return to a velocity of 0
//
// Example
// -------
//
// For an example of how to use this library, see the `Play.pyxl' in this game.
//
// Profiles
// --------
// 
// The library comes pre stocked with a dictionary of `ACCELERATION_PROFILES`.
// These are values based on well known games that were meant to show how
// different feels were achievable with the same model, harvested from GMTK
// [2].
//
// You can easily add your own -- for example, on the gmtk game jam, we started
// from profiles that come stock and added additional ones for various parts of
// the game as we tuned the feel.  Just add more sub dictionaries with the
// three values and it does the rest.
//
// To use the profile, the `make_accelerator_from_profile` function takes as an
// argument the name of a profile in the `ACCELERATION_PROFILES` dictionary.
//
// Hope that helps!
//
// Model
// -----
//
// As noted previously, this uses a model based on Swink's ADSR model[1].  ADSR
// stands for `attack`, `decay` `sustain`, `release` and comes from electronic
// synthesizers.  The model that is used here is at present a simplified
// version of this, omitting the `decay` portion and allowing `sustain` to be
// indefinitely long. The trade off is that you set three very concrete
// parameters and you get four zones of acceleration during which acceleration
// is constant, which means velocity is linear and position is quadratic.
//
// it looks roughly like this:
// (v) |   ,--------------.
//     |  /                \
//     | /                  \
//     x---|--------------|--- (t)
//     attack   sustain     release
//
// (velocity over time)
// 
// - if the input parameter is non-zero, starting from rest, the accelerator
//   will accelerate the set number of frames until `max_velocity` is reached
// - if the input parameter continues to be non-zero with the same sign, it
//   will `sustain` (hold velocity) indefinitely
// - if the input goes to 0, it will `release` until reaching 0
// - if the input is non-zero with an opposite sign it will "opposite-attack",
//   basically accelerate towards the opposite signed maximum velocity
//
// References:
// ----------
// [1] "Game Feel: A Game Designer's Guide to Virtual Sensation", by Swink,
//     Steve.  Taylor & Francis, 2009 . ISBN: 0123743281, 9780123743282
// [2] "Why does Celeste feel so good?" by Brown, Mark.  Game Makers Toolkit
//     Youtube channel. https://www.patreon.com/posts/why-does-celeste-28582857
//
///////////////////////////////////////////////////////////////////////////////

// @{ DATA
// ------------------------
// from GMTK: 
// current_velocity is in 1080p pixels / s
// @TODO: should port these from 1080p pixels/frame to quadplay native pixels/
//        frame
//
// Feel free to add to this!  Or in your game, add your own, like this:
// ACCELERATION_PROFILES[new_profile] = { max_velocity: 10,... }
const ACCELERATION_PROFILES = {
    celeste: {
        max_velocity: 5,
        num_frames_attack: 6,
        num_frames_release: 3,
    },
    new_super_mario_brothers: {
        max_velocity: 8,
        num_frames_attack: 28,  
        num_frames_release: 28,
    },
    megaman11: {
        max_velocity:4,
        num_frames_attack:1,
        num_frames_release:1,
    },
    super_meat_boy: {
        max_velocity:13.0,
        num_frames_attack:27,
        num_frames_release:2,
    },
    sonic_mania: {
        max_velocity: 30,
        num_frames_attack:115,
        num_frames_release: 120,
    }
}
// @}

// @{ constructors
def make_accelerator(
        // velocity, in the pre-stocked profiles measured as pixels/frame
        max_velocity,

        // number of frames under acceleration before reaching max_velocity
        // when starting from rest
        num_frames_attack,

        // number of frames without input before returning to rest from maximum
        // velocity
        num_frames_release,

        // the initial velocity is useful if you're switching the profile of
        // an accelerator so that you can seed the next accelerator from the
        // current one
        initial_velocity default 0,
):
    let accel_attack = max_velocity/num_frames_attack
    let accel_release = max_velocity/num_frames_release

    return {
        // ADSR parameters (set by constructor)
        max_velocity: max_velocity,
        num_frames_attack: num_frames_attack,
        num_frames_release: num_frames_release,

        // actual parameters for the simulation (inferred from parameters)
        accel_attack: accel_attack,
        accel_release: accel_release,
        accel_opp_attack: accel_release + accel_attack,

        // state tracking information
        current_velocity: initial_velocity,
    }


def make_accelerator_from_profile(prof_name, initial_velocity default 0):

    let prof_data = ACCELERATION_PROFILES[prof_name]

    return make_accelerator(
        prof_data.max_velocity,
        prof_data.num_frames_attack,
        prof_data.num_frames_release,
        initial_velocity
    )
// @}


// @{ Update Function
def accelerator_update(accelerator, input):
    // returns the current velocity.  Also stores the current velocity as
    // accelerator.current_velocity

    let joy_sign = sign(input)
    let vel_sign = sign(accelerator.current_velocity)
    let joy_towards_vel = (vel_sign == joy_sign or vel_sign == 0)

    // input is accelerating
    if (
            joy_sign != 0 
            and  abs(accelerator.current_velocity) <=  accelerator.max_velocity
    ):
        let accel_amount = nil

        if joy_towards_vel:
            accel_amount = accelerator.accel_attack
        else:
            accel_amount = accelerator.accel_opp_attack

        accelerator.current_velocity += input * accel_amount

        accelerator.current_velocity = clamp(
            accelerator.current_velocity,
            -accelerator.max_velocity,
            accelerator.max_velocity,
        )
    else:
        // input is decelerating
        accelerator.current_velocity += (
            -1*vel_sign*accelerator.accel_release
        )

        // if the velocity on deceleration is less than half the deceleration
        // amount, clamp to 0
        if abs(accelerator.current_velocity) < accelerator.accel_release/2:
            accelerator.current_velocity = 0

    return accelerator.current_velocity
// @}
