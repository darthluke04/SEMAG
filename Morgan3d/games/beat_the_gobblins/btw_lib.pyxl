def delete_from_dust_list(thing):
    remove_values(dust, thing)

def swing_hitbox(PLAYER):
    return {
        pos: PLAYER.pos + xy(PLAYER.player_dir*23,  -13),
        size: xy(PLAYER.player_dir*34, 40),
        shape:"rect",
        color: rgb(1,0,0),
        z: 100,
    }


// @{ Utility for placing into play area 
def random_loc_in_play_area():
    return random_within_square() * (ARENA_SIZE_HALF_PX - BG_TILE_SIZE_PX)

def polar_to_xy(angle):
    return xy(cos(angle), sin(angle) * rotation_sign())

// uses rejection sampling to find a location inside the play area that is
// outside the SPAWN_REJECTION_RADIUS of the player
def random_loc_in_play_area_away_from_player():
    let candidate_pos = xy(0, 0)

    let target = xy(0, 0)
    if PLAYER:
        target = PLAYER.pos
    
    for num_tries < 20:
        candidate_pos = random_loc_in_play_area()
        if magnitude(candidate_pos - target) >= SPAWN_REJECTION_RADIUS:
            return candidate_pos

    return candidate_pos // return the last try if nothing else


let debug_spawn_locations = []
if DRAW_DEBUG_SPAWN_LOCATIONS:
    for i < 128:
        push(debug_spawn_locations, random_loc_in_play_area_away_from_player())
// @}
let cam_pos = xy(0, 0)


// detect debug variable status
// this one is in the tools menu and draws the origins, bounds, and other 
// things
let DEBUG_DRAW_ORIGINS = device_control("getDebugFlag", "entityBounds")

// how to offset the sprite by direction
// @TODO: set a pivot instead
const PLAYER_SPRITE_OFFSET = {
    "1" : xy( 16, -16),
    "-1": xy(-16, -16),
}

let SCORE = 0
// animation variables for the score display
let DISPLAYED_SCORE = clone(SCORE)
let SCORE_ANIM_START = nil

// parameters
const SCORE_SPR = namtari
const SCORE_ORIGIN = SCORE_SCALE*xy(4,2)

const enemies = []
let PLAYER = nil
// @{ 
const dust = []
// @}

// @{
const BG_TILE_SIZE_XY_PX = xy(BG_TILE_SIZE_PX, BG_TILE_SIZE_PX)
const ARENA_SIZE_PX = BG_TILE_SIZE_PX * ARENA_SIZE
const ARENA_SIZE_HALF_PX = ARENA_SIZE_PX / 2
const ARENA_SPAWNABLE_SIZE = ARENA_SIZE_HALF_PX - BG_TILE_SIZE_XY_PX
const WIZARD_ZONE_SIZE_PX = BG_TILE_SIZE_PX * WIZARD_ZONE_SIZE
const WIZARD_ZONE_SIZE_HALF_PX = WIZARD_ZONE_SIZE_PX / 2
const WALL_OFF_MIN = -ARENA_SIZE_HALF_PX + BG_TILE_SIZE_XY_PX - xy(0, 4)
const WALL_OFF_MAX = ARENA_SIZE_HALF_PX - BG_TILE_SIZE_XY_PX - xy(0, 6)
// @}

const CLOUD_PARALLAX_MAP = {
    0:  7/8,
    1:  1/2,
    2: -0.2
}

const CLOUD_Z_MAP = {
    0:  -4,
    1:  -3,
    2: 190,
}

let INTERVAL_BETWEEN_FLASHES = 300
let next_flash = INTERVAL_BETWEEN_FLASHES + random_integer(INTERVAL_BETWEEN_FLASHES)
const FLASH_LENGTH = 7

def draw_cloud_border():
    for 0 < layer < 3:
        draw_sprite({
            sprite: clouds_layeredSprite[0][2 - layer],
            pos: cam_pos * CLOUD_PARALLAX_MAP[layer],
            z: CLOUD_Z_MAP[layer],
        })


const RAIN_STREAKS = 200
const RAIN_OFFSETS = []
for i < RAIN_STREAKS:
    RAIN_OFFSETS[i] = random_integer(60)

const RAIN_COLORS = [
    #7b9cb3,
    #3982b3,
    #006ab4,
]

const SPLASHES_PER_FRAME = 1
const SPLASHES = []

def delete_splash(spl):
    fast_remove_value(SPLASHES, spl)
    
const Z_OFF = SCREEN_SIZE.y / 2
const RAIN_ANGLE_INC = 180deg / RAIN_STREAKS
const RAY_ORIGIN = xy(0, 1.5 SCREEN_SIZE.y)

def draw_rain():
    // add splashes every ten frames
    if mode_frames mod 10 == 0:
        const pos = random_loc_in_play_area()
        push(SPLASHES, make_anim_entity({
                name: "splash",
                pos: pos,
                z: pos.y + Z_OFF
            },
            splashSprite.splash,
            delete_splash
        ))

    let angle = 0deg
    const PARALLAXES = [
        cam_pos * CLOUD_PARALLAX_MAP[0],
        cam_pos * CLOUD_PARALLAX_MAP[1],
        cam_pos * CLOUD_PARALLAX_MAP[2],
    ]

    const MAX_LEN_FACT = 1.5 SCREEN_SIZE.x
    const rain_z = CLOUD_Z_MAP[2]
    for i < RAIN_STREAKS:
        const length = i mod 3

        angle += RAIN_ANGLE_INC
        const dir_vec = polar_to_xy(angle)

        const amount_along_line = 1 - ((mode_frames + RAIN_OFFSETS[i]) mod 60) / 60
        const ray_start = RAY_ORIGIN + MAX_LEN_FACT * amount_along_line * dir_vec
        const ray_end = ray_start + 10 dir_vec
        
        draw_line(
            ray_start,
            ray_end,
            RAIN_COLORS[length],
            rain_z
        )

    for spl in SPLASHES:
        draw_sprite(spl)


def draw_score(score, scale, z):
    preserving_transform:
        reset_transform()
        let pos = SCORE_SCALE * SCORE_SPR[0][0].size / 2 + SCORE_ORIGIN
        let opacity = 1

        if SCORE_ANIM_START != nil:
            let frames_past = (game_frames - SCORE_ANIM_START)
            opacity = lerp(opacity, 0, min(frames_past / SCORE_OPACITY_FRAMES, 1))
            if frames_past > SCORE_OPACITY_FRAMES:
                opacity = 1
                let amount = min((frames_past-SCORE_OPACITY_FRAMES)/SCORE_MOVE_FRAMES, 1)
                pos = lerp(pos + xy(0, -100), pos, amount)
                DISPLAYED_SCORE = clone(SCORE)
            if frames_past > SCORE_OPACITY_FRAMES + SCORE_MOVE_FRAMES:
                SCORE_ANIM_START = nil

        for char in split(unparse(DISPLAYED_SCORE), ""):
            const num = parse(char)
            draw_sprite(
                {
                    sprite: SCORE_SPR.fancy[num],
                    pos: pos,
                    scale:scale,
                    opacity: opacity,
                    z: z,
                }
            )
            pos.x += 24 SCORE_SCALE.x
    // @}

def draw_player():
    if not PLAYER:
        return

    draw_disk(
        PLAYER.pos + xy(2 PLAYER.player_dir, 5),
        BG_TILE_SIZE_XY_PX.x / 2,
        rgba(10/255, 10/255, 10/255, 25%),
        nil,
        PLAYER.pos.y + SCREEN_SIZE.y / 2,
    )
    
    draw_disk(
        PLAYER.pos + xy(2 PLAYER.player_dir, 5),
        BG_TILE_SIZE_XY_PX.x / 3,
        rgba(10/255, 10/255, 10/255, 75%),
        nil,
        PLAYER.pos.y + SCREEN_SIZE.y / 2,
    )

    // draw the character
    draw_sprite(
        {
            sprite: PLAYER.sprite,
            pos: PLAYER.pos + PLAYER_SPRITE_OFFSET[unparse(PLAYER.player_dir)], 
            scale: xy(PLAYER.player_dir, 1),
            z: PLAYER.pos.y + SCREEN_SIZE.y / 2,
        }
    )

    if DEBUG_DRAW_ORIGINS:
        draw_disk(PLAYER.pos, 5, #F00)

        let swing_hitbox_size = xy(46, -13)
        let hitbox2 = swing_hitbox(PLAYER)
        draw_bounds(hitbox2)

        let hit_enemies=0
        for en in enemies:
            if overlaps(hitbox2, en):
                hit_enemies+=1
        let color = rgb(1,0,0)
        if hit_enemies > 0:
            color = rgb(0,1,0)
        // draw_text(font, hit_enemies, hitbox.pos+hitbox.size, color)
        draw_bounds(PLAYER)
        draw_corner_rect(hitbox2.pos - hitbox2 / 2, hitbox2.size + xy(1, 1), nil, color, 100)


def draw_enemies():
    for en in enemies:
        en.z = en.pos.y + SCREEN_SIZE.y/2

        draw_disk(
            en.pos,
            BG_TILE_SIZE_XY_PX.x/2,
            rgba(10/255, 10/255, 10/255, 0.25),
            // rgba(10/255, 10/255, 10/255, 0.25),
            nil,
            en.z,
        )
        
        draw_disk(
            en.pos,
            BG_TILE_SIZE_XY_PX.x/3,
            rgba(10/255, 10/255, 10/255, 0.75),
            // rgba(10/255, 10/255, 10/255, 0.25),
            nil,
            en.z,
        )

        draw_entity(en)
        if DEBUG_DRAW_ORIGINS:
            draw_disk(en.pos, 5, #F00)
            draw_bounds(en)


def draw_dust():
    for d in dust:
        d.z = d.pos.y + SCREEN_SIZE.y / 2 + 15
        draw_sprite(d)
        if DEBUG_DRAW_ORIGINS:
            draw_bounds(d)


def draw_arena():
    // arena_bg
    let parallax_amount = cam_pos/8
    draw_rain()

    draw_cloud_border()

    // let parallax_amount = xy(cam_pos.x/4, cam_pos.y)
    draw_sprite({sprite: bgdungeon_fullSprite, pos: xy(0, 0)})

    // right points
    let right_top_pt = ARENA_SIZE_HALF_PX + BG_TILE_SIZE_XY_PX/2  - xy(0, 1)
    let right_bottom_pt = right_top_pt + xy(0, 100) - parallax_amount

    let left_top_pt = right_top_pt * xy(-1, 1)
    let left_bottom_pt = left_top_pt + xy(0, 100) - parallax_amount

    // triangles form the body of the tower
    draw_tri(
        left_top_pt,
        right_top_pt,
        left_bottom_pt,
        #991515
    )

    draw_tri(
        right_top_pt,
        left_bottom_pt,
        right_bottom_pt,
        #991515
    )
    set_background(tree_background)


def draw_all():
    draw_arena()
    draw_player()
    draw_enemies()
    draw_dust()
    draw_score(SCORE)


def clamp_position(pos):
    let clamped_pos =  xy(
        mid(-40, pos.x, 50),
        mid(-25, pos.y, 25)
    )

    // this gives a little drift so it is dead even when its in the dead area
    return (pos - clamped_pos) / 3 + clamped_pos


const cam_shake_approach_zero = 0.2

// compute camera position
def cam_update_frame(goal_pos):
    let goal = clone(goal_pos)
    goal = clamp_position(goal)

    let cam_shake_displacement = cam_shake_mag * random_direction2D()
    if cam_shake_mag >= 1:
        // let the magnitude decay every frame
        cam_shake_mag = lerp(cam_shake_mag, 0, cam_shake_approach_zero)
    else:
        cam_shake_mag = 0
    cam_pos = cam_pos + 0.1 * (goal - cam_pos) + cam_shake_displacement
    set_transform(SCREEN_SIZE / 2-cam_pos)

// camera shake system
let cam_shake_mag = 0
def add_cam_shake(intensity):
    cam_shake_mag += intensity
    cam_shake_mag = min(CAM_SHAKE_MAX, cam_shake_mag)
    // debug_print("Adding camera shake: " + intensity + ", cam shake is: " + cam_shake_mag)

