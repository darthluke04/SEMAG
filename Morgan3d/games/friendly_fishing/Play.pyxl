Play
════════════════════════════════════════════════════════════════════════
 
/*
 High scores are arrays that contain entries of the form:
 
 {name:string, value:number, date:number}
*/
def end_game():
    for player in player_array:
        stop_audio(player.reel_in_audio)
        stop_audio(player.reel_out_audio)
    
    const recent_best_data = load_local("recent_best_data") default {fish:[], heaviest:[], longest:[], total_mass:[]}

    const new_data = {
        fish: fish_caught, 
        heaviest:heaviest_fish, 
        longest:longest_fish, 
        total_mass: total_mass, 
        date: local_time().absolute_milliseconds
    }
    const too_old = new_data.date - 7 MILLISECONDS_PER_DAY
    let new_high_score = false
    
    for array at field in recent_best_data:
        // See if any element in the new data
        // could replace an element in the old data
        if array.length < MAX_SAVED_SCORES:
            new_high_score = true
            new_data[field + "_high"] = true
        else:
            for entry in array:
                if entry.date < too_old or entry.value ≤ new_data[field]:
                    new_data[field + "_high"] = true            
                    new_high_score = true
                    break
    
    if new_high_score:
        set_mode(NewHighScore, recent_best_data, new_data) because "High score"
    else:
        set_mode(Title) because "Game over"
           

enter
────────────────────────────────────────────────────────────────────────
set_random_seed()

resize(player_array, 0)
for p < 4: push(player_array, make_player(p))

// Remaining time for lines to be out, in frames * players 
line_frames_left = 0
fish_caught = 0
heaviest_fish = 0
longest_fish = 0
total_mass = 0

line_frames_left = GAME_TIME_MINUTES * 60 * 60

resize(fish_array, 0)

// Create a few more, but not too many fish total
// so that players don't spam cast
for i < 8: push(fish_array, make_fish())
set_background(LAKE_COLOR)


frame
────────────────────────────────────────────────────────────────────────

draw_grass()

// Fish on lines are handled in the player's update
iterate(fish_array, fish_update)
iterate(player_array, player_update)

draw_hud()

// Instructions. Process after players, so that the
// first button press is ignored
if show_instructions:
    const instructions = replace(INSTRUCTION_TEXT, gamepad_array[0].prompt)
    draw_text({
        font: large_font, 
        text: instructions, 
        pos: ½ SCREEN_SIZE - xy(120, 24), 
        color: #FFF,
        shadow: #0008,
        outline: OUTLINE_COLOR,
        x_align: "left",
        y_align: "center",
        z: 10,
        wrap_width: 80% SCREEN_SIZE.x,
        text_size: size(instructions) * game_frames / 45})


// Extend the clock while someone has a fish or is in scoring
let any_has_fish = false
let num_active_players = 0
for player in player_array:
    if player.action == player_reel:
        ++num_active_players
        
    if player.fish or (player.action == ∅):
        any_has_fish = true

// Don't quite decrease time linearly with the number
// of players--let there be an advantage to more
// players because it is more fun
line_frames_left -= num_active_players^0.75
    

local:
    // Show the time near the end
    const end_game_frames = 60 * 45
    const α = (end_game_frames - line_frames_left) / end_game_frames
    if α > 0:
        draw_text({
            text: format_number(max(line_frames_left / 60, 0), "oldstopwatch"),
            font: large_font,
            color: rgba(50% LAKE_COLOR, α),
            pos: ½ SCREEN_SIZE,
            x_align: "center",
            y_align: "top",
            z: 0.5
        })
        

if line_frames_left ≤ 0 and not any_has_fish: end_game()
