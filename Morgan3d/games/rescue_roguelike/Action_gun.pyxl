// This will walk down the trajectory of the shot and return the first cell
// where it encounters something it can hit.  Otherwise, it returns the
// very last square  
//
// Returns nil if the coord given is not a valid attack.  This could happen if
// you're trying to attack a square but it gets blocked by an earlier.
def compute_trajectory_for_gun(turn_state, unit, unit_spec, attack_coord):
    // can only shoot in cardinal directions
    const attack_vector = attack_coord - unit.coord
    if not eq(attack_vector, x_or_y(attack_vector)):
        return nil

    const attack_range = unit_spec.attack.range
    const attack_pierces = false // TODO
    let attack_dir = sign(x_or_y(attack_vector))
    let end_coord = nil
    let hit_objects = []
    let hit_coords = [] 
    let saw_attack_coord = false
    let i = 0
    let last_coord = nil
    for trajectory_coord in get_coords_in_dir(BATTLE_GRID_SIZE, unit.coord, attack_dir):
        const tile_spec = get_tile_spec_at(turn_state, trajectory_coord)
        if not tile_spec:
            break
        
        if tile_spec.blocks_projectiles:
            break

        last_coord =  trajectory_coord
        i += 1
        if i > attack_range:
            break

        if eq(trajectory_coord, attack_coord):
            saw_attack_coord = true

        end_coord = xy(trajectory_coord)
        for attacked_obj in get_grid_objects_at(turn_state, trajectory_coord):
            if can_object_be_hit(turn_state, attacked_obj):
                push(hit_objects, attacked_obj)

        if size(hit_objects) > 0:
            push(hit_coords, trajectory_coord)
            if not attack_pierces:
                break

    if not saw_attack_coord:
        return nil

    if size(hit_coords) == 0:
        push(hit_coords, last_coord)

    return {
        knockback_dir: attack_dir,

        action_type: "gun",
        start_coord: unit.coord,
        hit_objects: hit_objects,
        hit_coords: hit_coords,
        vector: end_coord - unit.coord,
    }


def execute_gun(turn_state, step, exec_result):
    const attacker_obj = step.action.unit
    const attacker_spec = step.action.spec
    const attack_vector = step.action.vector
    const attack_coord = attacker_obj.coord + attack_vector

    if attacker_obj.health <= 0:
        // dead objects cannot attack.
        return

    const gun_trajectory = compute_trajectory_for_gun(
        turn_state, attacker_obj, attacker_spec, attack_coord)
    if not gun_trajectory:
        return false

    let attacked_exec_log = {
        type: "attacked",
        attacker: attacker_obj,
        action: "gun",
        start: xy(attacker_obj.coord),
        trajectory_coord: âˆ…,
    }
    push(exec_result.exec_log, attacked_exec_log)
    const trajectory_coord = gun_trajectory.start_coord + gun_trajectory.vector
    attacked_exec_log.trajectory_coord = xy(trajectory_coord)
    for attacked_obj in gun_trajectory.hit_objects:
        push(exec_result.next_pending_steps, {
            type: "hit",
            defender: attacked_obj,
            attacker: attacker_obj,
            attacker_spec: attacker_spec,
            attack_vector: attack_vector,
        })
        
    if size(gun_trajectory.hit_objects) > 0:
        // we hit something so knockback on the hit square.
        push(exec_result.next_pending_steps, {
            type: "knockback",
            coord: trajectory_coord,
            dir: gun_trajectory.knockback_dir,
        })
    return true

