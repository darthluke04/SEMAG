// Melee attacks will return hit coords.  They will be invalid if the attack
// coord is out of melee range (or not in an orthogonal direction)
def compute_trajectory_for_melee(turn_state, unit, unit_spec, attack_coord):
    // can only attack in cardinal directions
    const attack_vector = attack_coord - unit.coord
    if not eq(attack_vector, x_or_y(attack_vector)):
        return nil

    const attack_range = unit_spec.attack.range
    const attack_dist = manhattan(attack_vector) 
    // cannot melee self
    if attack_dist < attack_range[0] or attack_dist > attack_range[1]:
        return nil

    let hit_objects = []
    let hit_coords = []
    let attack_dir = sign(x_or_y(attack_vector))
    for attack_range[0] <= i <= attack_range[1]:
        // this is a melee attack
        const attacked_coord = unit.coord + i*attack_dir
        if is_on_board(get_turn_tiles_board(turn_state), attacked_coord):
            push(hit_coords, attacked_coord)

        for attacked_obj in get_grid_objects_at(turn_state, attacked_coord):
            push(hit_objects, attacked_obj)

    let knockback_dirs = []
    if unit_spec.attack.knockback > 0:
        push(knockback_dirs, attack_dir)

    return {
        action_type: "melee",
        knockback_dirs: knockback_dirs,
        start_coord: unit.coord,
        hit_objects: hit_objects,
        hit_coords: hit_coords,
        vector: attack_vector
    }

def execute_melee(turn_state, step, exec_result):
    const attacker_obj = step.action.unit
    const attacker_spec = step.action.spec
    const attack_vector = step.action.vector
    const attack_coord = attacker_obj.coord + attack_vector
    if attacker_obj.health <= 0:
        // dead objects cannot attack.
        return

    const melee_trajectory = compute_trajectory_for_melee(
        turn_state, attacker_obj, attacker_spec, attack_coord)
    if not melee_trajectory:
        return false

    let attacked_exec_log = {
        type: "attacked",
        attacker: attacker_obj,
        action: "melee",
        start: xy(attacker_obj.coord),
        trajectory_coord: âˆ…,
    }
    push(exec_result.exec_log, attacked_exec_log)
    const trajectory_coord = (
        melee_trajectory.start_coord + melee_trajectory.vector
    )
    attacked_exec_log.trajectory_coord = xy(trajectory_coord)
    for attacked_obj in melee_trajectory.hit_objects:
        push(exec_result.next_pending_steps, {
            type: "hit",
            defender: attacked_obj,
            attacker: attacker_obj,
            attacker_spec: attacker_spec,
            attack_vector: attack_vector,
        })

    // if something was hit & the weapon has knockback
    if (
            size(melee_trajectory.hit_objects) > 0 
            and attacker_spec.attack.knockback > 0
    ):
        for knockback_dir in melee_trajectory.knockback_dirs:
            // we hit something so knockback on the hit square.
            push(exec_result.next_pending_steps, {
                type: "knockback",
                coord: trajectory_coord,
                dir: attacker_spec.attack.knockback * knockback_dir,
            })

    return true
